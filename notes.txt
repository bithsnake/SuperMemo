node_modules\expo\AppEntry.js
E:\WEBDEV\SuperMemo\node_modules\expo\AppEntry.js

// INFO ABOUT STYLES
/*
  "justifyContent" : "center" sets the items centered over the PRIMARY axis (row or column)
  "alignItems" : "center" sets the items to the center to the SECONDARY axis , which is not chosen as primary, determines items within each line
  "baseline" sets the baseline of all items to the same, in other words, think of a diagram with staples = same ground starting point
  "center" means center
  "flex-end" appears at the end of the SECONDARY axis
  "flex-wrap" determines the alignment of items along the SECONDARY axis within EACH line
  "alignContent" : aligns ALL content/items on the SECONDARY axis (only works if we have WRAPPING)
  "flexBasis" : sets the basis (row or column) size, so if row, its width, if it is column it is height
  "flexGrow" :  is basically exactly the same as settings the flex : 1 property
  "flexShrink" is basically the opposite of flex grow, setting flex: -1 is exactly the same as setting flexShrink
  "position : relative" : in react native components by default has all of its components position set to relative
  "relative" : respoects the "flex" property
  "absolute" : sets its position absolute relative to the parent element, and the other elemts will reposition themselves as if this absolute element does not exist

*/


<Text>Super Memo!</Text>
{/* <TouchableWithoutFeedback onPress={()=> console.log("Pressed on the image")}>
  <Image onProgress={() => console.log("Loading image")} source={{ width: 200, height: 300, uri: "https://picsum.photos/200/300" }}></Image>
</TouchableWithoutFeedback>
  <Text numberOfLines={1} onPress={()=> console.log("Pressed text")}>Touchable wuthout feedback</Text> */}

<TouchableHighlight onPress={() => console.log("Pressed on the image")}>
  <View style={{width : 200, height : 70, backgroundColor: "dodgerblue"}}></View>
</TouchableHighlight>



// Alert.alert("Super Memo", "Memo Created!", [
    //   { text: "Yes", onPress : ()=> console.log("Yes pressed") },
    //   { text: "No", onPress : ()=> console.log("No pressed") },
    // ])





    /*Not as trustworthy */
    // console.log(Dimensions.get('screen'));
    /*Gets the dimensions even in landscale mode */
    // console.log(useDimensions());
    //detect device orientation
    // console.log(useDeviceOrientation());


    let num : number = 0;
    let goup = true;
    let waveNumber = (n : number) => {
      setInterval(() => {
        switch (goup) {
          case true:
            n++;
            if (n >= 200) {
              goup = false;
            }
            console.log("num: ", n);
            break;
          case false:
            n--;
            if (num <= 0) {
              goup = true;
            }
            console.log("num: ", n);
            break;
          }
      }, 10);
      return n
    }